
Practical no 6

One way Anova

    import numpy as np
    #sample data: test scores for three different methods
    method1 = np.array([85,88,92,94,90])
    method2 = np.array([78,80,83,77,79])
    method3 = np.array([91,89,94,96,92])

    from scipy import stats
    #perform one way Anova
    f_stats,p_value = stats.f_oneway(method1,method2,method3)
    print('f-statistics:',f_stats)
    print('p-value:',p_value)

    

    import pandas as pd
    data = pd.DataFrame({

        'Score': [85, 78, 91, 88, 80, 89, 92, 83, 94, 94, 77, 96, 90, 79, 92],

        'Method': ['Method1', 'Method1', 'Method1', 'Method2', 'Method2', 'Method2', 'Method3', 'Method3', 'Method3',

                   'Method1', 'Method2', 'Method3', 'Method1', 'Method2', 'Method3'],

        'Gender': ['Female', 'Female', 'Female', 'Male', 'Male', 'Male', 'Female', 'Female', 'Female',

                   'Male', 'Male', 'Male', 'Female', 'Female', 'Female']

    })

    import statsmodels.api as sm
    from statsmodels.formula.api import ols

    model = ols('Score ~C(Method) * C(Gender)',data=data).fit()
    anova_table = sm.stats.anova_lm(model,typ=2)
    print(anova_table)

 


Practical no 4

t-test

    import numpy as np
    from scipy import stats

    #sample data
    group1 = np.array([85,90,88,92,95])
    group2 = np.array([78,80,84,83,82])

    #perform independent two-sample t-test
    t_stat, p_value = stats.ttest_ind(group1,group2)
    print(f"t-statistic:,{t_stat}")
    print(f"p-value:,{p_value}")

    #interpretation
    alpha = 0.05
    if p_value < alpha:
        print("Reject the null hypothesis: there is a significant difference between the two groups ")
    else:
        print(" fail to Reject the null hypothesis: there is a no significant difference between the two groups ")



z-test

    import numpy as np
    from scipy import stats

    #sample data
    sample_heights = np.array([66,68,70,65,69])
    population_mean= 67
    population_std= 2 # known population stansard deviation

    #calculate the sample mean
    sample_mean = np.mean(sample_heights)

    #perform one sample x-test
    z_stat = +(sample_mean - population_mean) / (population_std / np.sqrt(len(sample_heights)))
    p_value = 2 * (1 - stats.norm.cdf(np.abs(z_stat))) #two-tailed test

    print(f"z-statistic:,{z_stat}")
    print(f"p-value:,{p_value}")

    #interpretation
    alpha = 0.05
    if p_value < alpha:
        print("Reject the null hypothesis: the sample mean is significantly different from the population mean")
    else:
        print("fail to Reject the null hypothesis: the sample mean is not significantly different from the population mean")


Practical no:9

    import numpy as np
    import matplotlib.pyplot as plt
    from sklearn.linear_model import LinearRegression

Generate the data

    x=np.array([1,2,3,4,5])
    y=np.array([7,14,15,18,19])
    n = np.size(x)

    x_mean = np.mean(x)
    y_mean = np.mean(y)
    x_mean,y_mean

    

    Sxy = np.sum(x*y)- n*x_mean*y_mean
    Sxx = np.sum(x*x)- n*x_mean*x_mean

    b1 = Sxy/Sxx
    b0 = y_mean - b1*x_mean
    print('slope b1 is', b1)
    print('intercepy b0 is ', b0)

    

    plt.scatter(x,y)
    plt.xlabel('Independent variable X')
    plt.ylabel('Dependent variable Y')
    plt.title('Scatter Plot of X vs Y')
    plt.show()

[]

Plot the given datapoints and fit the regression line

    y_pred = b1 * x + b0
    plt.scatter(x,y,color = 'red')
    plt.plot(x,y_pred,color='green')
    plt.xlabel('X')
    plt.ylabel('Y')

    Text(0, 0.5, 'Y')

[]

Practical No:8

    import pandas as pd

    df = pd.read_csv('AAPL.csv',parse_dates=True,index_col="Date")

    df.head()



    print(df)

                     
    

    df['Volume'].plot()

   

[]

    df.plot(subplots=True,figsize=(6,6))

    

[]

    #Resampling the tie series data based on month 'M' frequency
    df_month = df.resample('M').mean()
    #using subplot
    fig, ax = plt.subplots(figsize=(8,6))
    #plotting bar graph
    ax.bar(df_month['2020':].index,df_month.loc['2020':,'Volume'],width=25,align='center')

    

[]

Practical no:3

Normal Distribution

1.Suppose there are 100 students in the class and in one of the
mathematics tests the average marks scored by the students in the
subject is 78 and the standard deviation is 25. The marks of the student
follow Normal probability distribution. find:(i) percentage of student
who got less than 60 marks

(ii) percentage of student who have scored more than 70

    import numpy as np
    from scipy.stats import norm
    import matplotlib.pyplot as plt
    from scipy import stats

    #Given information
    mean = 78
    std_dev = 25
    total_students = 100
    score = 60
    #calculate z-score for 60
    z_score = (score - mean) / std_dev
    #Calculate the probablity of gettibg a score less than 60
    prob = norm.cdf(z_score)
    #calculate the percentage of students who get less than 60 marks
    percentage = prob * 100
    #print the result
    print("The percentage of students who scored less than 60 is:" , round(percentage,2),"%")

    The percentage of students who scored less than 60 is: 23.58 %

    #Given information
    mean = 78
    std_dev = 25
    total_students = 100
    score = 70
    #calculate z-score for 60
    z_score = (score - mean) / std_dev
    #Calculate the probablity of gettibg a score less than 60
    prob = norm.cdf(z_score)
    #calculate the percentage of students who get less than 60 marks
    percentage =(1- prob) * 100
    #print the result
    print("The percentage of students who scored more than 60 is:" , round(percentage,2),"%")

    The percentage of students who scored more than 60 is: 62.55 %

2.Binomial Distribution

    from scipy.stats import binom

    #setting the values
    # of n of p
    n=6
    p=0.6

    #defining the list of r values
    r_values = list(range(n+1))
    #list of pmf values
    dist = [binom.pmf(r,n,p) for r in r_values]
    print(dist)

 

    #plotting the graph
    plt.bar(r_values, dist)
    plt.show()

[]

question:

Fashion Bazaar (FB) is an e-commerce company that sells kids apparel. It
is observed that 15% of their customers return the items purchased by
them for many reasons (such as size, color, and material mismatch). On a
specific day, 30 customers purchased items from FB. Calculate the
probability that exactly 5 customers will return the items.

    #Expected number of succesful trails = 5
    #total number of trials = 30
    #the probablity of success = 0.15

    stats.binom.pmf(5,30,0.15)

    

3.poisson

1.The number of calls arriving at a call center follows a Poisson
distribution at 20 calls per hour. #Calculate the probability that the
number of calls will be maximum 10.

    stats.poisson.cdf(10,20)

    

    from scipy.stats import chi2

    # Parameters for the Chi-Square distribution
    degrees_of_freedom = 5  # Degrees of freedom

    # Generate a range of x values
    x = np.linspace(0, 20, 1000)


    # Calculate the probability density function (PDF) for the Chi-Square distribution
    pdf = chi2.pdf(x, degrees_of_freedom)

    # Plot the PDF
    plt.plot(x, pdf, label=f'Chi-Square (df={degrees_of_freedom})')
    plt.xlabel('x')
    plt.ylabel('PDF')
    plt.legend()
    plt.title('Chi-Square Distribution')
    plt.grid()
    plt.show()

[]


Practical No: 5

    import pandas as pd
    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns

    #Assuming the dataset in the csv format
    df = pd.read_csv('sales_data - sales_data.csv')
    print(df.head())



    #df.info()
    df.iloc[:,5:12].nunique()

  

    df.describe()

  

    category_counts = df['Country'].value_counts()
    print(category_counts)

    

    sns.countplot(data=df,x='Customer_Gender')
    plt.title("Categorical Data distribution")

    

[]

    plt.hist(df['Month'],bins=10, edgecolor='black')
    plt.title('Revenue Histogram')
    plt.xlabel('Month')
    plt.ylabel('Revenue')
    plt.legend()

    
      plt.legend()

   

[]

One Hot Encoding

    one_hot_encoded_data = pd.get_dummies(df, columns=['Country'])
    one_hot_encoded_data

    {"type":"dataframe","variable_name":"one_hot_encoded_data"}

pratical 1

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

risk = pd.read_csv('risk_analytics_train - risk_analytics_train.csv')

risk.head()

risk.dtypes

risk.shape

risk.columns

risk.isnull().sum()

risk.describe()

for x in ['Gender','Married','Dependents','Self_Employed','Loan_Amount_Term']:
    risk[x].fillna(risk[x].mode()[0],inplace=True)


risk['LoanAmount'].fillna(round(risk['LoanAmount'].mean(),0),inplace=True)


risk['LoanAmount']

risk.Credit_History.mode()#using mode


risk['Credit_History'].fillna(value=1.0,inplace=True)
risk.isnull().sum()




AIM: Computing eigenvalues and eigenvectors for dimensionality
reduction
1. Find the eigenvalues and eigenvector of the following matrix

i. A = [[2, 2],
 [1, 3]]
|A – λI| = 0
|2-λ 2 |
|1 3-λ| = 0
=(2-λ)(3-λ) – 2(1)=0
= λ² - 5λ + 4 = 0
Eigenvalues: λ₁=4, λ₂=1
For λ₁=4:
(A - 4I)x = 0
|-2 2|
| 1 -1| → x₁ = [1, 1]
For λ₂=1:
(A - I)x = 0
|1 2|
|1 2| → x₂ = [-2, 1]



ii. A = [[2, -3, 0],
 [2, -5, 0],
 [0, 0, 3]]
|A – λI| = 0
|2-λ -3 0|
|2 -5-λ 0|
|0 0 3 -λ|
= ( (2-λ)(-5-λ) - (-3)(2) ) (3-λ)
= (λ² + 3λ -4)(3-λ)
Eigenvalues: λ₁=1, λ₂=-4, λ₃=3
For λ₁=1:
(A - I)x = 0 → Eigenvector x₁ = [1, 1/3, 0]
For λ₂=-4:
(A + 4I)x = 0 → Eigenvector x₂ = [1, 2, 0]
For λ₃=3:
(A - 3I)x = 0 → Eigenvector x₃ = [0, 0, 1]






AIM: Impute an example based on Rolle’s and Mean Value
Theorem
1. Verify Rolle’s Theorem
(a) f(x) = x2
- 5x + 9 , x € [1,4]
f(x) is continuous and differentiable on [1,4].
f(1) = 1 - 5(1) + 9 = 5
f(4) = 16 - 20 + 9 = 5
So, f(1) = f(4).
Hence Rolle’s Theorem is verified.
Now, f'(x) = 2x - 5
Set f'(c) = 0 → 2c - 5 = 0 → c = 2.5
Since c ∈ (1,4), Rolle’s Theorem is verified.


(b) f(x) = sin(x/2) , x € [0,2𝜋]
f(x) is continuous and differentiable on [0,2].
f(0) = 5
f(2) = 8 - 8 + 5 = 5
So, f(0) = f(2).
f'(c) = (f(b) - f(a))/(b - a)
4c - 4 = 5 – 5/ 2-0
4c - 4 = 0/2
4c - 4 = 0
C = 1 € [0, 2]


(2) For f(x) = 2x2- 4x + 5 define on Interval (0,2) verify LMVT
 f(x) = 2x² - 4x + 5, x ∈ [0,2]
 f(x) is continuous and differentiable on [0,2].
 f(0) = 2·0² - 4·0 + 5 = 5
 f(2) = 2·2² - 4·2 + 5 = 8 - 8 + 5 = 5
 So, f(0) = f(2)
 f'(c) = (f(b) - f(a)) / (b - a)
 f'(c) = (f(2) - f(0)) / (2 - 0)
 f'(c) = (5 - 5) / 2 = 0
 f'(x) = 4x - 4
 4c - 4 = 0
 4c = 4
 c = 1 ∈ [0,2




AIM: Calculate the dot product of the vector and norm of the
vector

Q1) Consider a matrix A = [[1, 2], [3, 4]], B = [[5, 6], [7, 8]] , Find the dot
product of these matrix.
Solution:
A * Bᵀ = [[1 , 2] , [3, 4] ] * [[5 , 7] , [6, 8]]
= [[17, 23], [39, 53]]


Q2) Calculate the angle between vectors = (2,1), b = (1,3) , using dot product
Solution:
a · b = (2×1) + (1×3) = 5
||a|| = √(2² + 1²) = √5
||b|| = √(1² + 3²) = √10
cos θ = (a · b) / (||a|| ||b||) = 5 / (√5 × √10) = 1/√2



Practical 11
AIM: Calculate Maxima and Minima for the given function
1. Find the Local Maxima and Local Minima for the function
f(x)= x3
-3x+2
step 1:First derivative
f′(x) = 3x² − 3 = 3(x² − 1) ⇒ f′(x) = 0 when x = −1, 1
Step 2: Second derivative
f″(x) = 6x
• At x = −1: f″(−1) = −6 < 0 ⇒ local maximum
• At x = 1: f″(1) = 6 > 0 ⇒ local minimum
Step 3: Function values
f(−1) = (−1)³ − 3(−1) + 2 = −1 + 3 + 2 = 4 ⇒ Local maximum at (−1, 4)
f(1) = 1³ − 3(1) + 2 = 1 − 3 + 2 = 0 ⇒ Local minimum at (1, 0)


2. Find the extremum of the function f(x)= -3x2+4x+7 and the extremeum
value

Vertex (extremum point) occurs at x* = −b/(2a) = −4 / (2·(−3)) = 2/3
Extremum value: f(2/3) = −3(2/3)² + 4(2/3) + 7
= −3·(4/9) + 8/3 + 7 = −12/9 + 8/3 + 7 = −4/3 + 8/3 + 7 = 4/3 + 7 = 25/3
Conclusion: Maximum value is 25/3 at x = 2/3 (≈ 8.333… at x ≈ 0.6667)


3. Find the maximum height when a stone is thrown at any time ‘t’ and
height is given by h = -10t2+20t+8

Time to reach maximum height: t* = −b/(2a) = −20 / (2·(−10)) = 1 s
Maximum height: h(1) = −10(1)² + 20(1) + 8 = −10 + 20 + 8 = 18
Conclusion: The stone reaches a maximum height of 18 units (meters if
t is in seconds and g ≈ 10 m/s²) at t = 1 s
